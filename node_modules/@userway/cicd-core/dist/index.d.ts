import { ServiceVersions, CommitScanConfig, CommitScan, Instance, ArtifactType, Scan as Scan$1, ScanScore, CoreLambdaResponses, ScanArtifact, ScanArtifactUploadData, ScanArtifactUploadResult, QualityGateTable, AnalysisScope, RetentionType, Ca11yCustomHeaders } from '@userway/cicd-api';
import { AxiosError, AxiosInstance } from 'axios';
import { z } from 'zod';
import { ReadStream } from 'node:fs';
import defaultSemver from 'semver';

interface ApiClient {
    getServiceVersions(): Promise<ServiceVersions>;
    postCommitScan(config: CommitScanConfig): Promise<CommitScan>;
    getInstance(instanceId: CommitScan['almInstanceId']): Promise<Instance>;
    postArtifact(scanId: CommitScan['id'], file: {
        path: string;
        type: ArtifactType;
        data: ReadStream;
    }): Promise<void>;
    postFinalizeUpload(scanId: CommitScan['id']): Promise<void>;
    getScanStatus(scanId: CommitScan['id']): Promise<Scan$1>;
    getScanScore(scanId: CommitScan['id']): Promise<ScanScore>;
    getCoreLambdaResponses(scanId: CommitScan['id']): Promise<CoreLambdaResponses>;
    postGenerateUploadData(scanId: CommitScan['id'], artifact: ScanArtifact): Promise<ScanArtifactUploadData>;
    postHandleUploadResult(scanId: CommitScan['id'], uploadResult: ScanArtifactUploadResult): Promise<void>;
    getSummaryTable(scanId: CommitScan['id']): Promise<QualityGateTable>;
}

declare function tcpPing(address?: string, port?: number, { attempts, timeout, }?: {
    attempts?: number | undefined;
    timeout?: number | undefined;
}): Promise<boolean>;

interface Connection {
    url: string;
    close?: () => Promise<void> | void;
}
type ConnectionFactory = (options: {
    logger: Logger;
    tcpPing: typeof tcpPing;
}) => Promise<Connection>;

declare function filter<T extends object>(predicate: (property: T[keyof T]) => boolean): (object: T) => T;

declare function config(autodetect: AutodetectedConfig): z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodObject<{
    organization: z.ZodString;
    project: z.ZodString;
    token: z.ZodString;
    branch: z.ZodDefault<z.ZodString>;
    commitHash: z.ZodDefault<z.ZodString>;
    commitMessage: z.ZodDefault<z.ZodString>;
    commitCreatedAt: z.ZodDefault<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodDate, z.ZodString]>, Date, string | Date>>>;
    contributorName: z.ZodDefault<z.ZodString>;
    contributorEmail: z.ZodDefault<z.ZodString>;
    pullRequest: z.ZodDefault<z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, z.ZodNumber>>>;
    /**
     * The timeout of scan in milliseconds
     * @default 900_000 (15 minutes)
     */
    timeout: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, z.ZodNumber>>;
    /**
     * The HTTP request timeout in milliseconds
     * @default 30_000 (30 seconds)
     */
    requestTimeout: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, z.ZodNumber>>;
    /**
     * The number of HTTP request retries
     * @default 3
     */
    requestRetries: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, z.ZodNumber>>;
    /**
     * The delay between HTTP request retries in milliseconds
     * @default exponentialDelay
     */
    requestRetriesDelay: z.ZodDefault<z.ZodUnion<[z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, z.ZodNumber>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodNumber>, z.ZodOptional<z.ZodType<AxiosError<unknown, unknown>, z.ZodTypeDef, AxiosError<unknown, unknown>>>, z.ZodOptional<z.ZodNumber>], z.ZodUnknown>, z.ZodNumber>]>>;
    /**
     * The HTTP status codes that trigger retries
     * @default [429, 502, 503]
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
     */
    requestRetriesStatusCodes: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
    /**
     * @internal
     */
    customHeaders: z.ZodDefault<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>>;
    /**
     * The UserWay API server URL
     * @default https://api.userway.org
     * @internal
     */
    server: z.ZodDefault<z.ZodString>;
    /**
     * Enable verbose mode
     * @default false
     */
    verbose: z.ZodDefault<z.ZodBoolean>;
    /**
     * Enable the spinner in the console
     * @default true
     */
    isSpinnerEnabled: z.ZodDefault<z.ZodBoolean>;
    /**
     * Pass even if the quality gate fails
     * @default false
     */
    ignoreQualityGate: z.ZodDefault<z.ZodBoolean>;
    dryRun: z.ZodDefault<z.ZodBoolean>;
    s3Upload: z.ZodDefault<z.ZodBoolean>;
    assigneeEmail: z.ZodOptional<z.ZodString>;
    /**
     * The override configuration for specific branches
     * @example
     * override: {
     *   'feature/*': {
     *     targetBranch: 'develop',
     *   },
     *   'hotfix/*': {
     *      targetBranch: 'main',
     *   }
     * }
     */
    override: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodObject<{
        /**
         * The name of the target branch for an analysis
         */
        targetBranch: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        /**
         * Compare with the target branch or calculate the overall results
         */
        scope: z.ZodOptional<z.ZodEffects<z.ZodEnum<["delta", "overall"]>, AnalysisScope, "delta" | "overall">>;
        /**
         * How long to keep the analysis results
         */
        retention: z.ZodOptional<z.ZodEffects<z.ZodEnum<["short", "long"]>, RetentionType, "short" | "long">>;
    }, "strip", z.ZodTypeAny, {
        targetBranch: string;
        scope?: AnalysisScope | undefined;
        retention?: RetentionType | undefined;
    }, {
        targetBranch?: string | undefined;
        scope?: "delta" | "overall" | undefined;
        retention?: "short" | "long" | undefined;
    }>>>;
    /**
     * Default configuration for pages
     * @example
     * common: {
     *   devices: ['desktop', 'mobile'],
     * },
     * pages: ['index.html'],
     */
    common: z.ZodOptional<z.ZodObject<{
        devices: z.ZodDefault<z.ZodArray<z.ZodEnum<["desktop", "mobile"]>, "many">>;
        auth: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"basic">;
            credentials: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
            }, {
                username: string;
                password: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        }, {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"form">;
            url: z.ZodString;
            credentials: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
            }, {
                username: string;
                password: string;
            }>;
            selectors: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
                submit: z.ZodString;
                additional: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            }, {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        }, {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"script">;
            url: z.ZodString;
            script: z.ZodEffects<z.ZodType<Function, z.ZodTypeDef, Function>, string, Function>;
        }, "strip", z.ZodTypeAny, {
            type: "script";
            url: string;
            script: string;
        }, {
            type: "script";
            url: string;
            script: Function;
        }>]>>;
        load: z.ZodOptional<z.ZodObject<{
            delay: z.ZodOptional<z.ZodEnum<["3 seconds", "5 seconds", "10 seconds", "20 seconds", "30 seconds", "60 seconds", "120 seconds"]>>;
            action: z.ZodOptional<z.ZodEnum<["scroll down 1 page", "scroll down 5 pages", "scroll down 10 pages", "scroll down 20 pages", "scroll down 40 pages"]>>;
        }, "strip", z.ZodTypeAny, {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        }, {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        }>>;
        script: z.ZodOptional<z.ZodEffects<z.ZodType<Function, z.ZodTypeDef, Function>, string, Function>>;
        required: z.ZodDefault<z.ZodBoolean>;
        reportIncomplete: z.ZodOptional<z.ZodBoolean>;
        includeIframes: z.ZodOptional<z.ZodBoolean>;
        elementScreenshots: z.ZodDefault<z.ZodBoolean>;
        pageScreenshot: z.ZodDefault<z.ZodBoolean>;
        ignoreUrls: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, RegExp, string | RegExp>, string, string | RegExp>, "many">>;
        includeRules: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        excludeRules: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        includeBestPractices: z.ZodOptional<z.ZodBoolean>;
        includeExperimental: z.ZodOptional<z.ZodBoolean>;
        level: z.ZodOptional<z.ZodEnum<["A", "AA", "AAA"]>>;
        ignoreSelectors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        ruleSpecificOptions: z.ZodOptional<z.ZodObject<{
            emptyAltAsPresentationalRole: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            emptyAltAsPresentationalRole?: boolean | undefined;
        }, {
            emptyAltAsPresentationalRole?: boolean | undefined;
        }>>;
        rootSelector: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    }, {
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    }>>;
    /**
     * The pages to be analyzed by UserWay
     * @example
     * pages: [
     *    {
     *      url: '/index.html',
     *      devices: ['desktop', 'mobile'],
     *    },
     * ]
     */
    pages: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        devices: z.ZodDefault<z.ZodArray<z.ZodEnum<["desktop", "mobile"]>, "many">>;
        auth: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"basic">;
            credentials: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
            }, {
                username: string;
                password: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        }, {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"form">;
            url: z.ZodString;
            credentials: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
            }, {
                username: string;
                password: string;
            }>;
            selectors: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
                submit: z.ZodString;
                additional: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            }, {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        }, {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"script">;
            url: z.ZodString;
            script: z.ZodEffects<z.ZodType<Function, z.ZodTypeDef, Function>, string, Function>;
        }, "strip", z.ZodTypeAny, {
            type: "script";
            url: string;
            script: string;
        }, {
            type: "script";
            url: string;
            script: Function;
        }>]>>;
        load: z.ZodOptional<z.ZodObject<{
            delay: z.ZodOptional<z.ZodEnum<["3 seconds", "5 seconds", "10 seconds", "20 seconds", "30 seconds", "60 seconds", "120 seconds"]>>;
            action: z.ZodOptional<z.ZodEnum<["scroll down 1 page", "scroll down 5 pages", "scroll down 10 pages", "scroll down 20 pages", "scroll down 40 pages"]>>;
        }, "strip", z.ZodTypeAny, {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        }, {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        }>>;
        script: z.ZodOptional<z.ZodEffects<z.ZodType<Function, z.ZodTypeDef, Function>, string, Function>>;
        required: z.ZodDefault<z.ZodBoolean>;
        reportIncomplete: z.ZodOptional<z.ZodBoolean>;
        includeIframes: z.ZodOptional<z.ZodBoolean>;
        elementScreenshots: z.ZodDefault<z.ZodBoolean>;
        pageScreenshot: z.ZodDefault<z.ZodBoolean>;
        ignoreUrls: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, RegExp, string | RegExp>, string, string | RegExp>, "many">>;
        includeRules: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        excludeRules: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        includeBestPractices: z.ZodOptional<z.ZodBoolean>;
        includeExperimental: z.ZodOptional<z.ZodBoolean>;
        level: z.ZodOptional<z.ZodEnum<["A", "AA", "AAA"]>>;
        ignoreSelectors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        ruleSpecificOptions: z.ZodOptional<z.ZodObject<{
            emptyAltAsPresentationalRole: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            emptyAltAsPresentationalRole?: boolean | undefined;
        }, {
            emptyAltAsPresentationalRole?: boolean | undefined;
        }>>;
        rootSelector: z.ZodOptional<z.ZodString>;
    }, {
        url: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    }, {
        url: string;
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    }>, z.ZodPipeline<z.ZodEffects<z.ZodString, {
        url: string;
        devices: string[];
    }, string>, z.ZodObject<z.objectUtil.extendShape<{
        devices: z.ZodDefault<z.ZodArray<z.ZodEnum<["desktop", "mobile"]>, "many">>;
        auth: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"basic">;
            credentials: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
            }, {
                username: string;
                password: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        }, {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"form">;
            url: z.ZodString;
            credentials: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
            }, {
                username: string;
                password: string;
            }>;
            selectors: z.ZodObject<{
                username: z.ZodString;
                password: z.ZodString;
                submit: z.ZodString;
                additional: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            }, {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        }, {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"script">;
            url: z.ZodString;
            script: z.ZodEffects<z.ZodType<Function, z.ZodTypeDef, Function>, string, Function>;
        }, "strip", z.ZodTypeAny, {
            type: "script";
            url: string;
            script: string;
        }, {
            type: "script";
            url: string;
            script: Function;
        }>]>>;
        load: z.ZodOptional<z.ZodObject<{
            delay: z.ZodOptional<z.ZodEnum<["3 seconds", "5 seconds", "10 seconds", "20 seconds", "30 seconds", "60 seconds", "120 seconds"]>>;
            action: z.ZodOptional<z.ZodEnum<["scroll down 1 page", "scroll down 5 pages", "scroll down 10 pages", "scroll down 20 pages", "scroll down 40 pages"]>>;
        }, "strip", z.ZodTypeAny, {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        }, {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        }>>;
        script: z.ZodOptional<z.ZodEffects<z.ZodType<Function, z.ZodTypeDef, Function>, string, Function>>;
        required: z.ZodDefault<z.ZodBoolean>;
        reportIncomplete: z.ZodOptional<z.ZodBoolean>;
        includeIframes: z.ZodOptional<z.ZodBoolean>;
        elementScreenshots: z.ZodDefault<z.ZodBoolean>;
        pageScreenshot: z.ZodDefault<z.ZodBoolean>;
        ignoreUrls: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, RegExp, string | RegExp>, string, string | RegExp>, "many">>;
        includeRules: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        excludeRules: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        includeBestPractices: z.ZodOptional<z.ZodBoolean>;
        includeExperimental: z.ZodOptional<z.ZodBoolean>;
        level: z.ZodOptional<z.ZodEnum<["A", "AA", "AAA"]>>;
        ignoreSelectors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        ruleSpecificOptions: z.ZodOptional<z.ZodObject<{
            emptyAltAsPresentationalRole: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            emptyAltAsPresentationalRole?: boolean | undefined;
        }, {
            emptyAltAsPresentationalRole?: boolean | undefined;
        }>>;
        rootSelector: z.ZodOptional<z.ZodString>;
    }, {
        url: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    }, {
        url: string;
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    }>>]>, "many">>;
    /**
     * The host of the internet website or tunnel function
     * @example
     * connection: ngrokConnection({
     *    authtoken: process.env.NGROK_TOKEN,
     *    addr: 'http://localhost:3000',
     * }),
     */
    connection: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        logger: z.ZodType<Logger, z.ZodTypeDef, Logger>;
        tcpPing: z.ZodType<typeof tcpPing, z.ZodTypeDef, typeof tcpPing>;
    }, "strip", z.ZodTypeAny, {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }>], z.ZodUnknown>, z.ZodPromise<z.ZodObject<{
        url: z.ZodString;
        close: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodPromise<z.ZodVoid>, z.ZodVoid]>>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }, {
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>>>]>>;
    /**
     * The paths to the generated reports folder
     * @default []
     */
    reportPaths: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">>, string[], string[] | undefined>;
    /**
     * The number of concurrent uploads for artifacts
     * @default 32
     */
    concurrency: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    organization: string;
    project: string;
    token: string;
    branch: string;
    commitHash: string;
    commitMessage: string;
    commitCreatedAt: Date;
    contributorName: string;
    contributorEmail: string;
    pullRequest: number;
    timeout: number;
    requestTimeout: number;
    requestRetries: number;
    requestRetriesDelay: number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number);
    requestRetriesStatusCodes: number[];
    customHeaders: Record<string, string>;
    server: string;
    verbose: boolean;
    isSpinnerEnabled: boolean;
    ignoreQualityGate: boolean;
    dryRun: boolean;
    s3Upload: boolean;
    override: Record<string, {
        targetBranch: string;
        scope?: AnalysisScope | undefined;
        retention?: RetentionType | undefined;
    }>;
    pages: ({
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[];
    reportPaths: string[];
    concurrency: number;
    assigneeEmail?: string | undefined;
    common?: {
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
}, {
    organization: string;
    project: string;
    token: string;
    branch?: string | undefined;
    commitHash?: string | undefined;
    commitMessage?: string | undefined;
    commitCreatedAt?: string | Date | undefined;
    contributorName?: string | undefined;
    contributorEmail?: string | undefined;
    pullRequest?: string | number | undefined;
    timeout?: string | number | undefined;
    requestTimeout?: string | number | undefined;
    requestRetries?: string | number | undefined;
    requestRetriesDelay?: string | number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number) | undefined;
    requestRetriesStatusCodes?: number[] | undefined;
    customHeaders?: Record<string, string> | undefined;
    server?: string | undefined;
    verbose?: boolean | undefined;
    isSpinnerEnabled?: boolean | undefined;
    ignoreQualityGate?: boolean | undefined;
    dryRun?: boolean | undefined;
    s3Upload?: boolean | undefined;
    assigneeEmail?: string | undefined;
    override?: Record<string, {
        targetBranch?: string | undefined;
        scope?: "delta" | "overall" | undefined;
        retention?: "short" | "long" | undefined;
    }> | undefined;
    common?: {
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    pages?: (string | {
        url: string;
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[] | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
    reportPaths?: string[] | undefined;
    concurrency?: string | number | undefined;
}>, {
    targetBranch: string;
    scope?: AnalysisScope | undefined;
    retention?: RetentionType | undefined;
    organization: string;
    project: string;
    token: string;
    branch: string;
    commitHash: string;
    commitMessage: string;
    commitCreatedAt: Date;
    contributorName: string;
    contributorEmail: string;
    pullRequest: number;
    timeout: number;
    requestTimeout: number;
    requestRetries: number;
    requestRetriesDelay: number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number);
    requestRetriesStatusCodes: number[];
    customHeaders: Record<string, string>;
    server: string;
    verbose: boolean;
    isSpinnerEnabled: boolean;
    ignoreQualityGate: boolean;
    dryRun: boolean;
    s3Upload: boolean;
    pages: ({
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[];
    reportPaths: string[];
    concurrency: number;
    assigneeEmail?: string | undefined;
    common?: {
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
} | {
    targetBranch: string | undefined;
    organization: string;
    project: string;
    token: string;
    branch: string;
    commitHash: string;
    commitMessage: string;
    commitCreatedAt: Date;
    contributorName: string;
    contributorEmail: string;
    pullRequest: number;
    timeout: number;
    requestTimeout: number;
    requestRetries: number;
    requestRetriesDelay: number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number);
    requestRetriesStatusCodes: number[];
    customHeaders: Record<string, string>;
    server: string;
    verbose: boolean;
    isSpinnerEnabled: boolean;
    ignoreQualityGate: boolean;
    dryRun: boolean;
    s3Upload: boolean;
    pages: ({
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[];
    reportPaths: string[];
    concurrency: number;
    assigneeEmail?: string | undefined;
    common?: {
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
}, {
    organization: string;
    project: string;
    token: string;
    branch?: string | undefined;
    commitHash?: string | undefined;
    commitMessage?: string | undefined;
    commitCreatedAt?: string | Date | undefined;
    contributorName?: string | undefined;
    contributorEmail?: string | undefined;
    pullRequest?: string | number | undefined;
    timeout?: string | number | undefined;
    requestTimeout?: string | number | undefined;
    requestRetries?: string | number | undefined;
    requestRetriesDelay?: string | number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number) | undefined;
    requestRetriesStatusCodes?: number[] | undefined;
    customHeaders?: Record<string, string> | undefined;
    server?: string | undefined;
    verbose?: boolean | undefined;
    isSpinnerEnabled?: boolean | undefined;
    ignoreQualityGate?: boolean | undefined;
    dryRun?: boolean | undefined;
    s3Upload?: boolean | undefined;
    assigneeEmail?: string | undefined;
    override?: Record<string, {
        targetBranch?: string | undefined;
        scope?: "delta" | "overall" | undefined;
        retention?: "short" | "long" | undefined;
    }> | undefined;
    common?: {
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    pages?: (string | {
        url: string;
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[] | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
    reportPaths?: string[] | undefined;
    concurrency?: string | number | undefined;
}>, {
    targetBranch: string;
    scope?: AnalysisScope | undefined;
    retention?: RetentionType | undefined;
    organization: string;
    project: string;
    token: string;
    branch: string;
    commitHash: string;
    commitMessage: string;
    commitCreatedAt: Date;
    contributorName: string;
    contributorEmail: string;
    pullRequest: number;
    timeout: number;
    requestTimeout: number;
    requestRetries: number;
    requestRetriesDelay: number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number);
    requestRetriesStatusCodes: number[];
    customHeaders: Record<string, string>;
    server: string;
    verbose: boolean;
    isSpinnerEnabled: boolean;
    ignoreQualityGate: boolean;
    dryRun: boolean;
    s3Upload: boolean;
    pages: ({
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[];
    reportPaths: string[];
    concurrency: number;
    assigneeEmail?: string | undefined;
    common?: {
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
} | {
    targetBranch: string | undefined;
    organization: string;
    project: string;
    token: string;
    branch: string;
    commitHash: string;
    commitMessage: string;
    commitCreatedAt: Date;
    contributorName: string;
    contributorEmail: string;
    pullRequest: number;
    timeout: number;
    requestTimeout: number;
    requestRetries: number;
    requestRetriesDelay: number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number);
    requestRetriesStatusCodes: number[];
    customHeaders: Record<string, string>;
    server: string;
    verbose: boolean;
    isSpinnerEnabled: boolean;
    ignoreQualityGate: boolean;
    dryRun: boolean;
    s3Upload: boolean;
    pages: ({
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[];
    reportPaths: string[];
    concurrency: number;
    assigneeEmail?: string | undefined;
    common?: {
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
}, {
    organization: string;
    project: string;
    token: string;
    branch?: string | undefined;
    commitHash?: string | undefined;
    commitMessage?: string | undefined;
    commitCreatedAt?: string | Date | undefined;
    contributorName?: string | undefined;
    contributorEmail?: string | undefined;
    pullRequest?: string | number | undefined;
    timeout?: string | number | undefined;
    requestTimeout?: string | number | undefined;
    requestRetries?: string | number | undefined;
    requestRetriesDelay?: string | number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number) | undefined;
    requestRetriesStatusCodes?: number[] | undefined;
    customHeaders?: Record<string, string> | undefined;
    server?: string | undefined;
    verbose?: boolean | undefined;
    isSpinnerEnabled?: boolean | undefined;
    ignoreQualityGate?: boolean | undefined;
    dryRun?: boolean | undefined;
    s3Upload?: boolean | undefined;
    assigneeEmail?: string | undefined;
    override?: Record<string, {
        targetBranch?: string | undefined;
        scope?: "delta" | "overall" | undefined;
        retention?: "short" | "long" | undefined;
    }> | undefined;
    common?: {
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    pages?: (string | {
        url: string;
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[] | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
    reportPaths?: string[] | undefined;
    concurrency?: string | number | undefined;
}>, {
    targetBranch: string;
    scope?: AnalysisScope | undefined;
    retention?: RetentionType | undefined;
    organization: string;
    project: string;
    token: string;
    branch: string;
    commitHash: string;
    commitMessage: string;
    commitCreatedAt: Date;
    contributorName: string;
    contributorEmail: string;
    pullRequest: number;
    timeout: number;
    requestTimeout: number;
    requestRetries: number;
    requestRetriesDelay: number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number);
    requestRetriesStatusCodes: number[];
    customHeaders: Record<string, string>;
    server: string;
    verbose: boolean;
    isSpinnerEnabled: boolean;
    ignoreQualityGate: boolean;
    dryRun: boolean;
    s3Upload: boolean;
    pages: ({
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[];
    reportPaths: string[];
    concurrency: number;
    assigneeEmail?: string | undefined;
    common?: {
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
} | {
    targetBranch: string | undefined;
    organization: string;
    project: string;
    token: string;
    branch: string;
    commitHash: string;
    commitMessage: string;
    commitCreatedAt: Date;
    contributorName: string;
    contributorEmail: string;
    pullRequest: number;
    timeout: number;
    requestTimeout: number;
    requestRetries: number;
    requestRetriesDelay: number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number);
    requestRetriesStatusCodes: number[];
    customHeaders: Record<string, string>;
    server: string;
    verbose: boolean;
    isSpinnerEnabled: boolean;
    ignoreQualityGate: boolean;
    dryRun: boolean;
    s3Upload: boolean;
    pages: ({
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | {
        url: string;
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[];
    reportPaths: string[];
    concurrency: number;
    assigneeEmail?: string | undefined;
    common?: {
        required: boolean;
        devices: ("desktop" | "mobile")[];
        elementScreenshots: boolean;
        pageScreenshot: boolean;
        script?: string | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional: string[];
            };
        } | {
            type: "script";
            url: string;
            script: string;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        ignoreUrls?: string[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
}, {
    organization: string;
    project: string;
    token: string;
    branch?: string | undefined;
    commitHash?: string | undefined;
    commitMessage?: string | undefined;
    commitCreatedAt?: string | Date | undefined;
    contributorName?: string | undefined;
    contributorEmail?: string | undefined;
    pullRequest?: string | number | undefined;
    timeout?: string | number | undefined;
    requestTimeout?: string | number | undefined;
    requestRetries?: string | number | undefined;
    requestRetriesDelay?: string | number | ((args_0: number | undefined, args_1: AxiosError<unknown, unknown> | undefined, args_2: number | undefined, ...args: unknown[]) => number) | undefined;
    requestRetriesStatusCodes?: number[] | undefined;
    customHeaders?: Record<string, string> | undefined;
    server?: string | undefined;
    verbose?: boolean | undefined;
    isSpinnerEnabled?: boolean | undefined;
    ignoreQualityGate?: boolean | undefined;
    dryRun?: boolean | undefined;
    s3Upload?: boolean | undefined;
    assigneeEmail?: string | undefined;
    override?: Record<string, {
        targetBranch?: string | undefined;
        scope?: "delta" | "overall" | undefined;
        retention?: "short" | "long" | undefined;
    }> | undefined;
    common?: {
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    } | undefined;
    pages?: (string | {
        url: string;
        required?: boolean | undefined;
        devices?: ("desktop" | "mobile")[] | undefined;
        script?: Function | undefined;
        auth?: {
            type: "basic";
            credentials: {
                username: string;
                password: string;
            };
        } | {
            type: "form";
            url: string;
            credentials: {
                username: string;
                password: string;
            };
            selectors: {
                username: string;
                password: string;
                submit: string;
                additional?: string[] | undefined;
            };
        } | {
            type: "script";
            url: string;
            script: Function;
        } | undefined;
        load?: {
            delay?: "3 seconds" | "5 seconds" | "10 seconds" | "20 seconds" | "30 seconds" | "60 seconds" | "120 seconds" | undefined;
            action?: "scroll down 1 page" | "scroll down 5 pages" | "scroll down 10 pages" | "scroll down 20 pages" | "scroll down 40 pages" | undefined;
        } | undefined;
        reportIncomplete?: boolean | undefined;
        includeIframes?: boolean | undefined;
        elementScreenshots?: boolean | undefined;
        pageScreenshot?: boolean | undefined;
        ignoreUrls?: (string | RegExp)[] | undefined;
        includeRules?: string[] | undefined;
        excludeRules?: string[] | undefined;
        includeBestPractices?: boolean | undefined;
        includeExperimental?: boolean | undefined;
        level?: "A" | "AA" | "AAA" | undefined;
        ignoreSelectors?: string[] | undefined;
        ruleSpecificOptions?: {
            emptyAltAsPresentationalRole?: boolean | undefined;
        } | undefined;
        rootSelector?: string | undefined;
    })[] | undefined;
    connection?: string | ((args_0: {
        logger: Logger;
        tcpPing: typeof tcpPing;
    }, ...args: unknown[]) => Promise<{
        url: string;
        close?: ((...args: unknown[]) => void | Promise<void>) | undefined;
    }>) | undefined;
    reportPaths?: string[] | undefined;
    concurrency?: string | number | undefined;
}>;
type ZodConfig = ReturnType<typeof config>;
type ZodConfigType = z.input<ZodConfig>;
type ParsedConfig = z.output<ZodConfig>;
type Options = Partial<ZodConfigType> & {
    configPath?: string;
};
type Config = Omit<Partial<ZodConfigType>, 'verbose' | 'branch' | 'commitHash' | 'commitMessage' | 'commitDate' | 'contributorName' | 'contributorEmail' | 'pullRequest'>;

interface Logger {
    info: (message: string) => void;
    warn: (message: string) => void;
    error: (message: string) => void;
    debug: (message: string) => void;
}

declare class Process {
    private readonly logger;
    constructor(logger: Logger);
    execute(command: string): string;
}
interface AutodetectedConfig {
    branch: string;
    commitHash: string;
    commitMessage: string;
    commitDate?: string;
    contributorName: string;
    contributorEmail: string;
    targetBranch?: string;
    pullRequest?: number;
}
declare class GitAutodetectedConfig implements AutodetectedConfig {
    private readonly logger;
    private readonly process;
    constructor(logger: Logger, process?: Process);
    get branch(): string;
    get commitHash(): string;
    get commitMessage(): string;
    get commitDate(): string;
    get contributorName(): string;
    get contributorEmail(): string;
}

type HttpClient = AxiosInstance;
interface HttpClientOptions {
    server: string;
    token: string;
    requestTimeout: number;
    requestRetries: number;
    requestRetriesDelay: ((retryNumber?: number, error?: AxiosError, delayFactor?: number) => number) | number;
    requestRetriesStatusCodes: number[];
    customHeaders: Ca11yCustomHeaders;
}
declare function createServiceHttpClient(logger: Logger, options: HttpClientOptions): HttpClient;
declare function createS3HttpClient(logger: Logger, options: HttpClientOptions): HttpClient;

interface VersionChecker {
    check(): Promise<void>;
    readonly name: keyof ServiceVersions;
    readonly version: string;
    readonly message: string;
}
declare class CoreVersionChecker implements VersionChecker {
    private logger;
    private api;
    private semver;
    readonly name: keyof ServiceVersions;
    readonly version: string;
    constructor(logger: Logger, api: ApiClient, semver?: typeof defaultSemver);
    check(): Promise<void>;
    get message(): string;
}

type AutodetectedConfigFactory = (dependencies: {
    logger: Logger;
}) => AutodetectedConfig;
type HttpClientFactory = (dependencies: {
    logger: Logger;
    options: ParsedConfig;
}) => HttpClient;
type VersionCheckerFactory = (dependencies: {
    logger: Logger;
    api: ApiClient;
}) => VersionChecker;
interface Override {
    logger: Logger;
    autodetectedConfigFactory: AutodetectedConfigFactory;
    serviceHttpClientFactory: HttpClientFactory;
    s3HttpClientFactory: HttpClientFactory;
    versionCheckerFactory: VersionCheckerFactory;
}

interface Scan {
    status: Scan$1;
    score: ScanScore;
    config: CommitScanConfig;
}

declare global {
  function clickOnSelectorSafe(selector: string): Promise<void>;

  function clickOnSelector(selector: string): Promise<void>;

  function triggerMouseEventOnSelectorSafe(
    selector: string,
    event: string,
  ): Promise<void>;

  function triggerMouseEventOnSelector(
    selector: string,
    event: string,
  ): Promise<void>;

  function setSelectorCheckedSafe(
    selector: string,
    checked: boolean,
  ): Promise<void>;

  function setSelectorChecked(
    selector: string,
    checked: boolean,
  ): Promise<void>;

  function selectDropdownSafe(selector: string, value: string): Promise<void>;

  function selectDropdown(selector: string, value: string): Promise<void>;

  function typeInSelectorSafe(
    selector: string,
    text: string,
    textExpected?: string,
  ): Promise<void>;

  function typeInSelector(
    selector: string,
    text: string,
    textExpected?: string,
  ): Promise<void>;

  function waitForSelectorSafe(
    selector: string,
    timeout?: number,
  ): Promise<void>;

  function waitForSelector(selector: string, timeout?: number): Promise<void>;

  function waitForTimeout(timeout: number): Promise<void>;

  function navigateToUrl(url: string): Promise<void>;

  function makeScreenshotNow(name: string): Promise<void>;

  function evaluateExpression(expression: string): Promise<void>;
}

interface ScanResult extends Scan {
    shouldFail: boolean;
}
/**
 * Initiates an accessibility scan and gathers the resulting report.
 *
 * This function is a fundamental component of the `@userway/cicd-core`
 * library, which bridges client-side logic with the UserWay CI/CD backend
 * to enable continuous accessibility assessments.
 *
 * @param options - Configuration options for the scan.
 * @param override - Optional dependency overrides.
 *
 * @example
 * const result = await scan({
 *    token: process.env.USERWAY_TOKEN,
 *    organization: 'userway',
 *    project: 'continuous-accessibility',
 *    reportPaths: ['./uw-a11y-reports'],
 * });
 */
declare function scan(options: Options, { logger, autodetectedConfigFactory, serviceHttpClientFactory, s3HttpClientFactory, versionCheckerFactory, }?: Partial<Override>): Promise<ScanResult>;

export { type AutodetectedConfig, type AutodetectedConfigFactory, type Config, type Connection, type ConnectionFactory, CoreVersionChecker, GitAutodetectedConfig, type HttpClient, type HttpClientFactory, type HttpClientOptions, type Logger, type Options, type Override, Process, type Scan, type ScanResult, type VersionChecker, type VersionCheckerFactory, createS3HttpClient, createServiceHttpClient, filter, scan };
