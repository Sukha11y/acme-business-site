#! /usr/bin/env node
'use strict';

var e = require('winston');
var m = require('@userway/cicd-core');
var commander = require('commander');
var lockfile = require('lockfile');

function _interopNamespace(e) {
   if (e && e.__esModule) return e;
   var n = Object.create(null);
   if (e) {
      Object.keys(e).forEach(function (k) {
         if (k !== 'default') {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
               enumerable: true,
               get: function () { return e[k]; }
            });
         }
      });
   }
   n.default = e;
   return Object.freeze(n);
}

var e__namespace = /*#__PURE__*/_interopNamespace(e);
var m__namespace = /*#__PURE__*/_interopNamespace(m);

e__namespace.addColors({info:"cyan",error:"red",fatal:"red",debug:"green",warn:"yellow"});var b={fatal:0,error:1,warn:2,info:3,debug:4},t=e__namespace.createLogger({levels:b,level:"info",format:e__namespace.format.combine(e__namespace.format.splat(),e__namespace.format.colorize(),e__namespace.format.printf(({level:o,message:a})=>`${o}: ${a}`)),transports:[new e__namespace.transports.Console]});var r="@userway/cicd-cli",p="0.0.159";var s=class extends m__namespace.CoreVersionChecker{get message(){return `
        Update ${r} to Latest Version 

To ensure you have the latest features and security updates, please
update ${r} to the newest version.

1. Open your terminal.
2. Run the following command:

   npm install --save-dev ${r}@latest

3. Verify the installation by checking the package version:

   npm list ${r}

If you encounter any issues during the update, please refer to our
documentation or reach out to our support team.

        Thank you for keeping ${r} up to date!
`}};var n="userway.lock";process.on("SIGINT",()=>{lockfile.checkSync(n)&&lockfile.unlockSync(n),process.exit(1);});async function d(o){lockfile.checkSync(n)&&(t.error("Another scanning session is already running"),process.exit(1)),lockfile.lockSync(n);try{await o();}finally{lockfile.unlockSync(n);}}function g(){return new commander.Command().version(p).option("-c, --config-path [path]","path to the configuration file").option("-o, --organization [slug]","slug of the organization").option("-p, --project [name]","name of the project").option("-t, --token [token]","project api token").option("-b, --branch [name]","name of the branch").option("-ch, --commit-hash [sha1]","hash of the commit").option("-cm, --commit-message [message]","message of the commit").option("-cca, --commit-created-at [date]","date (in ISO format) when the commit was created").option("-ce, --contributor-email [email]","email of the contributor").option("-cn, --contributor-name [name]","name of the contributor").option("-v, --verbose","enable verbose logging for detailed output").option("--ignore-quality-gate","skip failing the build if the quality gate is not passed").option("--dry-run","simulate the process without sending the report to the server").option("--timeout [timeout]","maximum time (in seconds) to wait for the scan to complete").option("--server [url]","server to send the report to").option("--connection [url]","connection to use").option("--report-paths [paths...]","paths to the report folders").option("--concurrency [number]","number of concurrent uploads").action(async o=>{await d(async()=>{o.verbose&&(t.level="debug");let{score:a,shouldFail:h}=await m__namespace.scan(o,{logger:t,versionCheckerFactory:({logger:y,api:w})=>new s(y,w)});t.info(`Continuous Accessibility Quality Gate is ${a.outcome}`),process.exit(h?1:0);});})}g().parseAsync(process.argv).catch(o=>{t.error(o),process.exit(1);});
